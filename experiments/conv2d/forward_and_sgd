
# <editor-fold desc="load libraries">
import numpy as np
import os
import pandas as pd
import torchvision
import torch
import torch.nn as nn
import torchmetrics
import json
from itertools import product
from torchvision import datasets
from torchvision.transforms import ToTensor
from datetime import date
import time
import random
import wfdb

import matplotlib.pyplot as plt
import matplotlib

matplotlib.rcParams["mathtext.fontset"] = "cm"

device = (
    "cuda"
    if torch.cuda.is_available()
    else "mps"
    if torch.backends.mps.is_available()
    else "cpu"
)
print(f"Using {device} device")

from genomic_benchmarks.dataset_getters.pytorch_datasets import get_dataset


# </editor-fold>

# <editor-fold desc="conv2d few-shot experiments (forward and SGD)">

forward_training_methods = ["forward_projection", "random", "label_projection", "noisy_label_projection"]
sgd_training_methods = ["backprop", "local_supervision", "forward_forward"]
all_training_methods = forward_training_methods + sgd_training_methods

experiment_parameters = expand_grid({
    'rep': list(range(50)),
    'n_sample': [5, 10, 15, 20, 30, 40, 50]
})

seed = 0
random.seed(seed)
torch.manual_seed(seed)
np.random.seed(seed)
conv2d_experiments = []
for dataset_i in ['cxr', 'oct']:

    print(dataset_i)
    X_trainval, Y_trainval, X_test, Y_test, folds = load_dataset(dataset_i, img_size=128, channels_last=True)
    hidden_dim = 16
    n_blocks = 4
    hidden_dims = [hidden_dim * 2 ** (i // 2) for i in range(n_blocks * 2)]
    activation = "relu"
    train_folds = folds != 0
    val_folds = torch.logical_not(train_folds)
    X_train, X_val = X_trainval[train_folds], X_trainval[val_folds]
    Y_train, Y_val = Y_trainval[train_folds], Y_trainval[val_folds]

    for experiment_parameters_i in range(len(experiment_parameters)):

        print(dataset_i, experiment_parameters_i)

        rep = experiment_parameters.rep[experiment_parameters_i]
        n_sample = experiment_parameters.n_sample[experiment_parameters_i]

        for training_method in all_training_methods:

            n_train = round(n_sample * 0.8)
            n_val = n_sample - n_train

            X_train_s, Y_train_s = subsample_dataset(X_train,
                                                     Y_train,
                                                     n_sample=n_train)
            X_val_s, Y_val_s = subsample_dataset(X_train,
                                                 Y_train,
                                                 n_sample=n_val)

            if training_method in ["forward_projection", "random", "label_projection", "noisy_label_projection"]:

                X_trainval_s = torch.concatenate([X_train_s, X_val_s])
                Y_trainval_s = torch.concatenate([Y_train_s, Y_val_s])

                w_list, _, _, training_time = train_forward_conv2d(x=X_trainval_s,
                                                                   y=Y_trainval_s,
                                                                   training_method=training_method,
                                                                   hidden_dim=hidden_dim,
                                                                   activation=activation,
                                                                   n_blocks=n_blocks,
                                                                   device=device,
                                                                   reg_factor=10,
                                                                   batch_size=5
                                                                   )
                train_metrics = evaluate_forward_conv2d(x=X_trainval_s,
                                                        y=Y_trainval_s,
                                                        w_list=w_list,
                                                        activation=activation)
                test_metrics = evaluate_forward_conv2d(x=X_test,
                                                       y=Y_test,
                                                       w_list=w_list,
                                                       activation=activation,
                                                       batch_size=50)


            else:

                model, training_time, training_epochs = train_sgd_conv2d(
                    X_train=X_train_s.transpose(1, -1),
                    Y_train=Y_train_s,
                    X_val=X_val_s.transpose(1, -1),
                    Y_val=Y_val_s,
                    hidden_dims=hidden_dims,
                    activation=activation,
                    training_method=training_method,
                    lr=0.0001,
                    batch_size=25,
                    patience=10,
                    verbose=True)

                train_metrics = evaluate_sgd(model=model,
                                             x=X_train_s.transpose(1, -1),
                                             y=Y_train_s,
                                             )

                val_metrics = evaluate_sgd(model=model,
                                           x=X_val_s.transpose(1, -1),
                                           y=Y_val_s,
                                           )

                test_metrics = evaluate_sgd(model=model,
                                            x=X_test.transpose(1, -1),
                                            y=Y_test,
                                            )

            print(training_method, n_sample)
            print(train_metrics)
            print(test_metrics)

            out = {
                'dataset': dataset_i,
                'training_method': training_method,
                'activation': activation,
                'hidden_dim': hidden_dim,
                'n_blocks': n_blocks,
                'n_sample': n_sample,
                'train_auc': train_metrics[0].item(),
                'train_acc': train_metrics[1].item(),
                'test_auc': test_metrics[0].item(),
                'test_acc': test_metrics[1].item(),
                'training_time': training_time,
            }
            conv2d_experiments.append(out)

conv2d_experiments = pd.DataFrame(conv2d_experiments)
output_file = os.path.join(output_dir, "conv2d_experiments.csv")
conv2d_experiments.to_csv(path_or_buf=output_file)

# </editor-fold
